name: Build & Publish Notebooks to Pages

on:
  push:
    branches: [ main ]          # change to master if your default is master
    paths:
      - '**/*.ipynb'
      - '.github/workflows/publish-notebooks.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    # prevent running on forks
    if: ${{ github.repository == 'nd-cse-30124-fa25/cse-30124-homeworks' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install nbconvert
        run: |
          python -m pip install --upgrade pip
          pip install nbconvert jupyterlab_pygments pygments

      # Convert every .ipynb -> HTML, mirroring folder structure under site/
      - name: Convert notebooks to HTML
        run: |
          mkdir -p site
          while IFS= read -r -d '' f; do
            outdir="site/$(dirname "$f" | sed 's|^\./||')"
            mkdir -p "$outdir"
            jupyter nbconvert --to html "$f" \
              --output "$(basename "${f%.ipynb}").html" \
              --output-dir "$outdir"
          done < <(find . -type f -name '*.ipynb' -not -path '*/.ipynb_checkpoints/*' -print0)

      - name: Create light and dark themed copies
        run: |
          python <<'PY'
          import os
          import re
          import shutil
          from pathlib import Path

          site_root = Path("site")
          source_css_dir = Path("css")
          target_css_dir = site_root / "css"
          target_css_dir.mkdir(parents=True, exist_ok=True)

          if source_css_dir.exists():
              for css_file in source_css_dir.glob("*.css"):
                  shutil.copy2(css_file, target_css_dir / css_file.name)

          variants = {
              "light": "gruvbox-light.css",
              "dark": "gruvbox-dark.css",
          }

          html_files = [
              p for p in site_root.rglob("*.html")
              if not any(p.name.endswith(f"-{variant}.html") for variant in variants)
          ]

          todo_pattern = re.compile(r'(<span class="c[^"]*">[^<]*?)(TODO)(?=[:\\s])')

          def highlight_todos(html: str) -> str:
              return todo_pattern.sub(
                  lambda m: f'{m.group(1)}<span class="todo-keyword">{m.group(2)}</span>',
                  html,
              )

          for html_path in html_files:
              original = html_path.read_text()
              processed = highlight_todos(original)

              for variant, css_name in variants.items():
                  dest = html_path.with_name(f"{html_path.stem}-{variant}.html")
                  rel_href = os.path.relpath(target_css_dir / css_name, dest.parent).replace(os.sep, "/")
                  link_tag = f'<link rel="stylesheet" href="{rel_href}" data-theme="{variant}">'

                  if "</head>" in processed:
                      themed = processed.replace("</head>", f"  {link_tag}\n</head>", 1)
                  else:
                      themed = f"{link_tag}\n{processed}"

                  if "<body" in themed:
                      themed = themed.replace("<body", f'<body data-theme="{variant}"', 1)

                  dest.write_text(themed)

              html_path.unlink()
          PY

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    if: ${{ github.repository == 'nd-cse-30124-fa25/cse-30124-homeworks' }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
